{
  "name": "appbase-js",
  "version": "0.10.6",
  "description": "Appbase.io streaming client lib for Javascript",
  "main": "dist/appbase.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "appbase",
    "elasticsearch",
    "stream",
    "search"
  ],
  "author": {
    "name": "Sacheendra Talluri"
  },
  "license": "ISC",
  "dependencies": {
    "JSONStream": "^1.0.4",
    "guid": "0.0.12",
    "hyperquest": "^1.2.0",
    "murmur": "0.0.2",
    "through2": "^2.0.0",
    "ws": "^0.8.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-babel": "^5.0.3",
    "grunt-browserify": "^3.8.0",
    "grunt-contrib-uglify": "^0.9.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.2.5"
  },
  "readme": "# appbase-js\n\nAppbase.io is a data streams library for Node.JS and Javascript (browser build is in the [browser/](https://github.com/appbaseio/appbase-js/tree/master/browser) directory); compatible with [elasticsearch.js](https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html).\n\nAn up-to-date documentation for Node.JS API is available at http://docs.appbase.io/scalr/javascript/nodejs-intro.html.\n\n## Quick Example\n\nWorking code snippets where each step builds on the previous ones.\n\n#### Step 1: Add some data into the app (uses elasticsearch.js)\n```js\n// app and authentication configurations \nconst HOSTNAME = \"scalr.api.appbase.io\"\nconst APPNAME = \"createnewtestapp01\"\nconst USERNAME = \"RIvfxo1u1\"\nconst PASSWORD = \"dee8ee52-8b75-4b5b-be4f-9df3c364f59f\"\n\n// Add data into our ES \"app index\"\nvar Appbase = require('appbase-js')\nvar appbase = new Appbase({\n\t\turl: 'https://'+USERNAME+\":\"+PASSWORD+\"@\"+HOSTNAME,\n\t\tappname: APPNAME\n\t});\nappbase.index({\n    type: \"product\",\n    id: \"1\",\n    body: {\n        name: 'A green door',\n        price: 12.50,\n        tags: ['home', 'green'],\n        stores: ['Walmart', 'Target']\n    }\n}).on('data', function(res) {\n    console.log(res);\n}).on('error', function(err) {\n\tconsole.log(err);\n});\n```\n\n#### Step 2: Read the data stream from a particular DB location\n\nReturns continous updates on a JSON document from a particular ``type``.\n\n```js\nappbase.getStream({\n      type: 'product',\n      id: '1'\n}).on('data', function(res) {\n      // 'data' handler is triggered every time there is a **new** document update.\n      console.log(res);\n}).on('error', function(err) {\n      console.log(\"caught a stream error\", err);\n})\n```\n\n``Note:`` Existing document value is returned via ``get()`` method.\n\n##### Console Output\n\n```js\n{ _index: 'app`248',\n  _type: 'product',\n  _id: '1',\n  _version: 4,\n  found: true,\n  _source: \n   { name: 'A green door',\n     price: 12.5,\n     tags: [ 'home', 'green' ],\n     stores: [ 'Walmart', 'Target' ] } }\n```\n\ngetStream() returns a ``stream.Readable`` object, which can be conveniently listened via the 'on(\"data\")' event listener. Check out the [stream_document_test.js](https://github.com/appbaseio/appbase-js/blob/master/test/stream_document_test.js) where we make an update to the document and see any further updates to it via the 'data' event. \n\n#### Step 3: Apply queries on data streams\n\nGet continuous results by searching across the database streams. A query can be written using the [ElasticSearch Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html) - which supports composing boolean, regex, geo, fuzzy, range queries. Let's stream the results of a simple **``match_all``** query on the ``product`` type:\n\n```js\nappbase.searchStream({\n\ttype: 'product',\n\tbody: {\n\t\tquery: {\n\t\t\tmatch_all: {}\n\t\t}\n\t}\n}).on('data', function(res, err) {\n\tconsole.log(res);\n}).on('error', function(err) {\n\tconsole.log(\"caught a stream error\", err);\n})\n```\n\n##### Console Output\n\n```js\n{ took: 1,\n  timed_out: false,\n  _shards: { total: 1, successful: 1, failed: 0 },\n  hits: \n   { total: 4,\n     max_score: 1,\n     hits: [ [Object], [Object], [Object], [Object] ] } }\n```\n\nsearchStream() also returns a ``stream.Readable`` object, which can be conveniently listened via the 'on(\"data\")' event listener. Check out the [stream_search_test.js](https://github.com/appbaseio/appbase-js/blob/master/test/stream_search_test.js) where we make an update that matches the query and see the results in the event stream. \n\n\n## API Reference\n\nFor a complete API reference, check out [JS API Ref doc](http://docs.appbase.io/scalr/javascript/api-reference.html).\n\n### Global\n\n**[new Appbase(args)](https://github.com/appbaseio/appbase-js/blob/master/appbase.js#L16)**  \n\nReturns a **reference** object on which streaming requests can be performed.\n\n> **args** - A set of key/value pairs that configures the ElasticSearch Index  \n&nbsp;&nbsp;&nbsp;&nbsp;url: \"https://scalr.api.appbase.io\"  \n&nbsp;&nbsp;&nbsp;&nbsp;appname: App name (equivalent to an ElasticSearch Index)  \n&nbsp;&nbsp;&nbsp;&nbsp;username: App's username  \n&nbsp;&nbsp;&nbsp;&nbsp;password: App's password key\n\nOptionally (and like in the quick example above), ``url`` can contain username and password fields in the format: https://&lt;USERNAME>:&lt;PASSWORD>@scalr.appbase.io.\n\n### Reference\n\n**[reference.getStream(args)](https://github.com/appbaseio/appbase-js/blob/master/appbase.js#L99)** \n\nGet continuous updates on a JSON document with a ``type`` and ``id``. Returns a [``stream.Readable``](https://nodejs.org/api/stream.html#stream_class_stream_readable) object.\n\n> **args** - A set of key/value pairs that makes the document URL  \n&nbsp;&nbsp;&nbsp;&nbsp;type: ElasticSearch Type, a string  \n&nbsp;&nbsp;&nbsp;&nbsp;id: Valid Document ID\n\n**[reference.searchStream(args)](https://github.com/appbaseio/appbase-js/blob/master/appbase.js#L103)** \n\nGet continuous updates on search queries (fuzzy, boolean, geolocation, range, full-text). Returns a [``stream.Readable``](https://nodejs.org/api/stream.html#stream_class_stream_readable) object.\n\n> **args** - A set of key/value pairs that makes the document URL  \n&nbsp;&nbsp;&nbsp;&nbsp;type: ElasticSearch Type, a string  \n&nbsp;&nbsp;&nbsp;&nbsp;body: A JSON Query Body (Any query matching the [ElasticSearch Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html))\n",
  "readmeFilename": "README.md",
  "_id": "appbase-js@0.10.6",
  "dist": {
    "shasum": "c59d969d2f36d1382b14bb3c2d3d152cd3d7397c"
  },
  "_from": "appbase-js@",
  "_resolved": "https://registry.npmjs.org/appbase-js/-/appbase-js-0.10.6.tgz"
}
